{"version":3,"sources":["components/Nav/Nav.js","components/Form/Form.js","actions/index.js","components/CurrentDeck/CurrentDeck.js","components/SavedDecksContainer/SavedDecksContainer.js","components/SideBar/SideBar.js","components/Card/Card.js","components/CardListContainer/CardListContainer.js","components/ViewDeckContainer/ViewDeckContainer.js","components/CardDetails/CardDetails.js","components/App/App.js","apicalls.js","reducers/index.js","reducers/loadCards.js","reducers/savedDecks.js","serviceWorker.js","index.js"],"names":["Nav","changePage","navBtn","currentPage","to","className","onClick","src","alt","Form","props","updateDeckNameState","e","setState","name","target","value","save","preventDefault","deckToBeSaved","state","currentDeck","saveDeck","clearDeckStateOnSave","this","onChange","placeholder","type","disabled","Component","connect","dispatch","deck","classicCards","loadCards","cardsInDeck","currentlySelectedDeck","map","currentCard","find","cardName","collectible","card","cardId","data-testid","key","Date","now","savedDecks","deckName","Object","keys","changeDeck","id","SideBar","Card","imgGold","addCardToDeck","removeCardFromDeck","addOrRemoveButton","onError","onerror","cardList","img","length","cardInfo","filter","cardStats","CardDetails","cardToRender","cost","playerClass","text","cardSet","rarity","flavor","artist","attack","health","App","componentDidMount","fetch","method","headers","then","response","json","loadClassicCards","catch","err","console","error","message","updatedDeck","concat","includes","splice","indexOf","updatedCurrentDeckName","savedDeck","newCurrentDeck","page","resetCurrentDeck","path","exact","component","render","match","classicCard","params","cards","rootReducer","combineReducers","action","incomingDeckName","currentDeckNames","deckToRemove","Boolean","window","location","hostname","store","createStore","composeWithDevTools","router","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"meA0BeA,EApBH,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,WACTC,EAAyB,iBADc,EAAlBC,YAEtB,kBAAC,IAAD,CAASC,GAAG,IAAIC,UAAU,eACzB,4BAAQA,UAAU,aAAaC,QAAS,kBAAML,EAAW,UAAzD,sBAED,kBAAC,IAAD,CAASI,UAAU,cAAcD,GAAG,iBACnC,4BAAQC,UAAU,aAAaC,QAAS,kBAAML,EAAW,kBAAzD,sBAGJ,OACE,6BACE,yBAAKI,UAAU,oBACb,yBAAKA,UAAU,cAAcE,IAAI,0BAA0BC,IAAI,qBAC/D,2DAEDN,I,+BCdDO,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,oBAAsB,SAACC,GACrB,EAAKC,SAAS,CAACC,KAAMF,EAAEG,OAAOC,SARb,EAWnBC,KAAO,SAAAL,GACLA,EAAEM,iBACF,IAAIC,EAAa,eAAK,EAAKC,MAAMN,KAAO,EAAKJ,MAAMW,aACnD,EAAKX,MAAMY,SAASH,GACpB,EAAKT,MAAMa,wBAbX,EAAKH,MAAQ,CACXN,KAAM,IAHS,E,qDAkBT,IAAD,OACP,OACE,8BACE,2BAAOE,MAAOQ,KAAKJ,MAAMN,KAAMW,SAAUD,KAAKb,oBAAqBe,YAAY,kBAAkBC,KAAK,SACtG,4BAAQC,UAAWJ,KAAKJ,MAAMN,KAAMR,QAAS,SAAAM,GAAC,OAAI,EAAKK,KAAKL,IAAIP,UAAU,YAA1E,a,GAvBWwB,aAiCJC,cAAQ,MAJI,SAAAC,GAAQ,MAAK,CACtCT,SAAU,SAAAU,GAAI,OAAID,EChCI,SAAAC,GAAI,MAAK,CAC/BL,KAAM,YACNK,QD8B2BV,CAASU,QAGvBF,CAAkCrB,GEZlCqB,G,MAAAA,aALS,SAAAV,GAAK,MAAK,CAChCa,aAAcb,EAAMc,aAIPJ,EAtBK,SAAApB,GAClB,IAAIyB,EAAczB,EAAM0B,sBAAsBC,KAAI,SAAAC,GAChD,OAAO5B,EAAMuB,aAAaM,MAAK,SAAAC,GAAQ,OAAIA,EAAS1B,OAASwB,IAAwC,IAAzBE,EAASC,kBAGvF,OACE,6BAASpC,UAAU,sBACjB,wBAAIA,UAAU,kBAAd,gBACA,wBAAIA,UAAU,aACX8B,EAAYE,KAAI,SAAAK,GACf,OAAQ,kBAAC,IAAD,CAAStC,GAAE,wBAAmBsC,EAAKC,QAAUtC,UAAU,kBAAiB,wBAAIuC,cAAaF,EAAK5B,KAAO,YAAa+B,IAAKC,KAAKC,OAAQL,EAAK5B,gBCM5IgB,G,MAAAA,aAJS,SAAAV,GAAK,MAAK,CAChC4B,WAAY5B,EAAM4B,cAGLlB,EAlBa,SAAApB,GAC1B,OACE,6BAASL,UAAU,yBACjB,wBAAIA,UAAU,kBAAd,eACA,4BACCK,EAAMsC,WAAWX,KAAI,SAAAL,GACpB,IAAIiB,EAAWC,OAAOC,KAAKnB,GAC3B,OAAQ,4BAAI,4BAAQ1B,QAAS,SAAAM,GAAC,OAAIF,EAAM0C,WAAWxC,EAAEG,OAAOsC,KAAKA,GAAIJ,EAAS,GAAI5C,UAAU,aAAa4C,EAAS,cCQ3GK,EAZC,SAAC,GAAuD,IAArDjC,EAAoD,EAApDA,YAAa+B,EAAuC,EAAvCA,WAAY7B,EAA2B,EAA3BA,qBAC1C,OACE,2BAAOqB,cAAY,WACjB,yBAAKvC,UAAU,qBACb,kBAAC,EAAD,CAAMgB,YAAaA,EAAaE,qBAAsBA,IACtD,kBAAC,EAAD,CAAaa,sBAAuBf,KAEtC,kBAAC,EAAD,CAAqB+B,WAAYA,MCQxBG,G,MAjBF,SAAC,GAA+E,IAA9EF,EAA6E,EAA7EA,GAAIR,EAAyE,EAAzEA,IAAK/B,EAAoE,EAApEA,KAAM0C,EAA8D,EAA9DA,QAASC,EAAqD,EAArDA,cAAeC,EAAsC,EAAtCA,mBAChDC,EAAoC,SADkD,EAAlBxD,YAErE,4BAAQkD,GAAIvC,EAAM8B,cAAa9B,EAAO,OAAQR,QAAS,SAAAM,GAAC,OAAI6C,EAAc7C,EAAEG,OAAOsC,KAAKhD,UAAU,oBAAlG,OACA,4BAAQgD,GAAIvC,EAAM8B,cAAa9B,EAAO,OAAQR,QAAS,SAAAM,GAAC,OAAI8C,EAAmB9C,EAAEG,OAAOsC,KAAKhD,UAAU,uBAAvG,UAEH,OACE,6BAASuC,cAAaS,EAAIR,IAAKA,EAAKxC,UAAU,kBAC5C,yBAAKuD,QAAS,SAAChD,GAAKA,EAAEG,OAAO8C,QAAU,KAAMjD,EAAEG,OAAOR,IAAI,iFAAkFA,IAAKiD,EAAShD,IAAKM,IAC/J,wBAAIT,UAAU,kBAAkBS,GAChC,yBAAKT,UAAU,yBACZsD,EACD,kBAAC,IAAD,CAASN,GAAIA,EAAIhD,UAAU,gBAAgBD,GAAE,wBAAmBiD,IAAM,4BAAQT,cAAa9B,EAAMT,UAAU,qBAArC,aCmB/DyB,G,MAAAA,aAJS,SAAAV,GAAK,MAAK,CAChCa,aAAcb,EAAMc,aAGPJ,EA7BW,SAAApB,GACxB,IAAIoD,EAAWpD,EAAMuB,aAAaI,KAAI,SAAAK,GACpC,OAAyB,IAArBA,EAAKD,YACC,kBAAC,EAAD,CACAY,GAAIX,EAAKC,OACTE,IAAKH,EAAKC,OACV7B,KAAM4B,EAAK5B,KACXiD,IAAKrB,EAAKqB,IACVP,QAASd,EAAKc,QACdC,cAAe/C,EAAM+C,cACrBC,mBAAoBhD,EAAMgD,mBAC1BvD,YAAaO,EAAMP,cAGlB,QAIb,OACE,6BAASyC,cAAY,sBAAsBvC,UAAU,uBAClDyD,OCaQhC,G,MAAAA,aAJS,SAAAV,GAAK,MAAK,CAChCa,aAAcb,EAAMc,aAGPJ,EAjCW,SAAApB,GACxB,IAAIoD,EAoBJ,OAlBGA,EADApD,EAAMW,YAAY2C,OAAS,EAChBtD,EAAMW,YAAYgB,KAAI,SAAAK,GAChC,IACIuB,EADevD,EAAMuB,aAAaiC,QAAO,SAAA1B,GAAQ,OAAIA,EAAS1B,OAAS4B,KAC/CH,MAAK,SAAA4B,GAAS,OAA8B,IAA1BA,EAAU1B,eACxD,OAAQ,kBAAC,EAAD,CACAY,GAAIY,EAAStB,OACbE,IAAKoB,EAAStB,OACd7B,KAAMmD,EAASnD,KACfiD,IAAKE,EAASF,IACdP,QAASS,EAAST,QAClBC,cAAe/C,EAAM+C,cACrBC,mBAAoBhD,EAAMgD,wBAIxB,wBAAIrD,UAAU,eAAd,0BAKZ,6BAASA,UAAU,uBAChByD,OCgBQM,G,MAxCK,SAAA1D,GAClB,IAAI2D,EAA8B,UAAf3D,EAAMiB,KACtB,wBAAItB,UAAU,oBACf,0CAAgBK,EAAM4D,MACtB,6CAAmB5D,EAAM6D,aACzB,qCAAW7D,EAAM8D,MACjB,0CAAgB9D,EAAMiB,MACtB,yCAAejB,EAAM+D,SACrB,uCAAa/D,EAAMgE,QACnB,4CAAkBhE,EAAMiE,QACxB,uCAAajE,EAAMkE,SAElB,wBAAIvE,UAAU,oBACb,0CAAgBK,EAAM4D,MACtB,6CAAmB5D,EAAM6D,aACzB,qCAAW7D,EAAM8D,MACjB,uCAAa9D,EAAMmE,QACnB,uCAAanE,EAAMoE,QACnB,0CAAgBpE,EAAMiB,MACtB,yCAAejB,EAAM+D,SACrB,uCAAa/D,EAAMgE,QACnB,4CAAkBhE,EAAMiE,QACxB,uCAAajE,EAAMkE,SAGvB,OACE,6BAASvE,UAAU,gBACjB,0CAAgBK,EAAMI,MACtB,yBAAKT,UAAU,qBACb,yBAAKA,UAAU,cAAcuD,QAAS,SAAChD,GAAKA,EAAEG,OAAO8C,QAAU,KAAMjD,EAAEG,OAAOR,IAAI,iFAAkFA,IAAKG,EAAM8C,QAAShD,IAAKE,EAAMI,OAClMuD,GAEH,yBAAKhE,UAAU,4BACb,4BAAQgD,GAAI3C,EAAMI,KAAMR,QAAS,SAAAM,GAAC,OAAIF,EAAM+C,cAAc7C,EAAEG,OAAOsC,KAAKhD,UAAU,mBAAlF,eACA,kBAAC,IAAD,CAASA,UAAU,mBAAmBD,GAAG,KAAI,4BAAQC,UAAU,oBAAlB,uB,OC3B/C0E,E,kDACJ,aAAe,IAAD,8BACZ,gBAOFC,kBAAoB,WCpBbC,MAAM,mEAAqE,CAClFC,OAAQ,MACNC,QAAS,CACP,eAAgB,mBAChB,kBAAmB,wCACpB,iBAAkB,wDAGpBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UDctBF,MAAK,SAAAnD,GACJ,EAAKvB,MAAM6E,iBAAiBtD,MAE7BuD,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,EAAIG,aAbtB,EAgBdnC,cAAgB,SAAAjB,GACd,IAAIqD,EAAc,EAAKzE,MAAMC,YAAYyE,OAAO,CAACtD,IACjD,EAAK3B,SAAS,CAACQ,YAAawE,KAlBhB,EAqBdnC,mBAAqB,SAAAlB,GACnB,GAAG,EAAKpB,MAAMC,YAAY0E,SAASvD,GAAW,CAC5C,IAAIqD,EAAc,EAAKzE,MAAMC,YAC7B,EAAKD,MAAMC,YAAY2E,OAAO,EAAK5E,MAAMC,YAAY4E,QAAQzD,GAAW,GACxE,EAAK3B,SAAS,CAACQ,YAAawE,MAzBlB,EA6BdzC,WAAa,SAAAH,GACX,IACIiD,EADiB,EAAKxF,MAAMsC,WAAWX,KAAI,SAAAL,GAAI,OAAIkB,OAAOC,KAAKnB,MACvBO,MAAK,SAAA4D,GAAS,OAAIA,EAAU,KAAOlD,KAC3EmD,EAAiB,EAAK1F,MAAMsC,WAAWT,MAAK,SAAA4D,GAAS,OAAIA,EAAUD,EAAuB,OAC9F,EAAKrF,SAAS,CAACQ,YAAa+E,EAAeF,MAjC/B,EAoCdjG,WAAa,SAAAoG,GACX,EAAKxF,SAAS,CAACV,YAAakG,KArChB,EAwCdC,iBAAmB,WACjB,EAAKzF,SAAS,CAACQ,YAAa,MAvC5B,EAAKD,MAAQ,CACXC,YAAa,GACblB,YAAa,QAJH,E,qDA4CJ,IAAD,OACP,OACE,8BACE,kBAAC,EAAD,CAAKF,WAAYuB,KAAKvB,WAAYE,YAAaqB,KAAKJ,MAAMjB,cAC1D,kBAAC,IAAD,KACA,kBAAC,IAAD,CACIoG,KAAK,IAAIC,OAAK,EACdC,UAAW,kBACT,6BAASpG,UAAU,gBACjB,kBAAC,EAAD,CACEgB,YAAa,EAAKD,MAAMC,YACxB+B,WAAY,EAAKA,WACjB7B,qBAAsB,EAAK+E,mBAE7B,kBAAC,EAAD,CACE7C,cAAe,EAAKA,cACpBC,mBAAoB,EAAKA,mBACzBvD,YAAa,EAAKiB,MAAMjB,YACxBF,WAAY,EAAKA,iBAK3B,kBAAC,IAAD,CACIsG,KAAK,gBAAgBC,OAAK,EAC1BC,UAAW,kBACT,6BAASpG,UAAU,gBACjB,kBAAC,EAAD,CACEgB,YAAa,EAAKD,MAAMC,YACxB+B,WAAY,EAAKA,WACjB7B,qBAAsB,EAAK+E,mBAE7B,kBAAC,EAAD,CACE7C,cAAe,EAAKA,cACpBpC,YAAa,EAAKD,MAAMC,YACxBlB,YAAa,EAAKiB,MAAMjB,YACxBF,WAAY,EAAKA,WACjByD,mBAAoB,EAAKA,yBAKnC,kBAAC,IAAD,CACE6C,KAAK,oBAAoBC,OAAK,EAC9BE,OAAQ,YAAgB,IAAbC,EAAY,EAAZA,MACHjE,EAAO,EAAKhC,MAAMuB,aAAaM,MAAK,SAAAqE,GACxC,OAAOD,EAAME,OAAOxD,KAAOuD,EAAYjE,UAEzC,OAAQ,6BAAStC,UAAU,gBACvB,kBAAC,EAAD,CACEgB,YAAa,EAAKD,MAAMC,YACxB+B,WAAY,EAAKA,WACjB7B,qBAAsB,EAAK+E,mBAE7B,kBAAC,EAAD,eAAa7C,cAAe,EAAKA,eAAmBf,c,GAnGlDb,aAwHHC,eAPS,SAAAV,GAAK,MAAK,CAChCa,aAAcb,EAAMc,UACpBc,WAAY5B,EAAM4B,eANO,SAAAjB,GAAQ,MAAK,CACtCwD,iBAAkB,SAAAtD,GAAY,OAAIF,ER1HM,CACxCJ,KAAM,eACNmF,MQwH4D7E,QAU/CH,CAA6CiD,G,uBE3H7CgC,EALKC,0BAAgB,CAClC9E,UCLuB,WAAyB,IAAxBd,EAAuB,uDAAf,GAAI6F,EAAW,uCAC/C,OAAQA,EAAOtF,MACb,IAAK,eACH,MAAM,GAAN,mBAAWP,GAAX,YAAqB6F,EAAOH,QAC9B,QACE,OAAO1F,IDCX4B,WENwB,WAAyB,IAAxB5B,EAAuB,uDAAf,GAAI6F,EAAW,uCAChD,OAAQA,EAAOtF,MACb,IAAK,YACH,IAAIuF,EAAmBhE,OAAOC,KAAK8D,EAAOjF,MACtCmF,EAAmB/F,EAAMiB,KAAI,SAAAL,GAE/B,OADWkB,OAAOC,KAAKnB,GACX,MAEd,GAAImF,EAAiBpB,SAASmB,EAAiB,IAAK,CAClD,IAAIE,EAAehG,EAAMmB,MAAK,SAAAP,GAE5B,OADekB,OAAOC,KAAKnB,GACX,KAAOkF,EAAiB,MAG1C,OADA9F,EAAM4E,OAAO5E,EAAM6E,QAAQmB,GAAe,GACpC,GAAN,mBAAWhG,GAAX,CAAkB6F,EAAOjF,OAEzB,MAAM,GAAN,mBAAWZ,GAAX,CAAkB6F,EAAOjF,OAE7B,QACE,OAAOZ,MCPOiG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASb,MACvB,2DCPN,IAAMc,EAAQC,sBAAYX,EAAaY,iCAEjCC,EAAS,kBAAC,IAAD,KAAe,kBAAC,EAAD,OAE9BC,IAASnB,OACP,kBAAC,IAAD,CAAUe,MAAOA,GACf,kBAAC,IAAMK,WAAP,KACGF,IAGLG,SAASC,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEd7C,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMC,c","file":"static/js/main.fd8f0107.chunk.js","sourcesContent":["import React from 'react';\nimport './Nav.css';\nimport { NavLink } from 'react-router-dom';\nimport PropTypes from \"prop-types\";\n\n\nconst Nav = ({ changePage, currentPage }) => {\n  let navBtn = currentPage === \"current-deck\" ?\n    (<NavLink to=\"/\" className=\"nav-link-el\">\n      <button className=\"nav-button\" onClick={() => changePage('home')}>Back to Card List</button>\n    </NavLink>) :\n    (<NavLink className=\"nav-link-el\" to=\"/current-deck\">\n      <button className=\"nav-button\" onClick={() => changePage('current-deck')}>View Current Deck</button>\n    </NavLink>)\n\n  return (\n    <nav>\n      <div className=\"header-container\">\n        <img className=\"header-logo\" src=\"../../images/LogoHS.png\" alt=\"hearthstone-logo\"/>\n        <h1>Deck Creator For Beginners</h1>\n      </div>\n      {navBtn}\n    </nav>\n  )\n}\n\nexport default Nav\n\nNav.propTypes = {\n  changePage: PropTypes.func,\n  currentPage: PropTypes.string\n}","import React, { Component } from 'react';\nimport './Form.css';\nimport { connect } from 'react-redux';\nimport { saveDeck } from '../../actions'\nimport PropTypes from \"prop-types\";\n\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: ''\n    }\n  }\n\n  updateDeckNameState = (e) => {\n    this.setState({name: e.target.value})\n  }\n\n  save = e => {\n    e.preventDefault()\n    let deckToBeSaved = {[this.state.name]: this.props.currentDeck}\n    this.props.saveDeck(deckToBeSaved)\n    this.props.clearDeckStateOnSave()\n  }\n\n  render() {\n    return(\n      <form>\n        <input value={this.state.name} onChange={this.updateDeckNameState} placeholder=\"Enter Deck Name\" type=\"text\"/>\n        <button disabled={!this.state.name} onClick={e => this.save(e)} className=\"save-btn\">Save</button>\n      </form>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  saveDeck: deck => dispatch(saveDeck(deck))\n})\n\nexport default connect(null, mapDispatchToProps)(Form)\n\nForm.propTypes = {\n  saveDeck: PropTypes.func,\n  clearDeckStateOnSave: PropTypes.func\n}","export const loadClassicCards = cards => ({\n  type: 'LOAD_CLASSIC',\n  cards\n})\n\nexport const saveDeck = deck => ({\n  type: 'SAVE_DECK',\n  deck\n})","import React from 'react'\nimport './CurrentDeck.css'\nimport { connect } from 'react-redux'\nimport { NavLink } from 'react-router-dom';\nimport PropTypes from \"prop-types\";\n\nconst CurrentDeck = props => {\n  let cardsInDeck = props.currentlySelectedDeck.map(currentCard => {\n    return props.classicCards.find(cardName => cardName.name === currentCard && cardName.collectible === true)\n  })\n\n  return(\n    <section className=\"current-deck-cards\">\n      <h2 className=\"sidebar-header\">Current Deck</h2>\n      <ol className=\"deck-list\">\n        {cardsInDeck.map(card => {\n          return (<NavLink to={`/card-details/${card.cardId}`} className=\"deck-card-name\"><li data-testid={card.name + \"-decklist\"} key={Date.now()}>{card.name}</li></NavLink>)\n        })}\n      </ol>\n    </section>\n  )\n}\n\nconst mapStateToProps = state => ({\n  classicCards: state.loadCards\n})\n\n\nexport default connect(mapStateToProps)(CurrentDeck)\n\nCurrentDeck.propTypes = {\n  currentlySelectedDeck: PropTypes.array,\n}","import React from 'react';\nimport './SavedDecksContainer.css'\nimport { connect } from 'react-redux';\n\nconst SavedDecksContainer = props => {\n  return(\n    <section className=\"saved-decks-container\">\n      <h2 className='sidebar-header'>Saved Decks</h2>\n      <ul>\n      {props.savedDecks.map(deck => {\n        let deckName = Object.keys(deck)\n        return (<li><button onClick={e => props.changeDeck(e.target.id)} id={deckName[0]} className=\"deck-link\">{deckName[0]}</button></li>)\n      })}\n      </ul>\n    </section>\n  )\n}\n\nconst mapStateToProps = state => ({\n  savedDecks: state.savedDecks\n})\n\nexport default connect(mapStateToProps)(SavedDecksContainer)\n\n","import React from 'react';\nimport './SideBar.css';\nimport Form from '../Form/Form';\nimport CurrentDeck from '../CurrentDeck/CurrentDeck';\nimport SavedDecksContainer from '../SavedDecksContainer/SavedDecksContainer';\nimport PropTypes from \"prop-types\";\n\nconst SideBar = ({ currentDeck, changeDeck, clearDeckStateOnSave }) => {\n  return(\n    <aside data-testid=\"sidebar\">\n      <div className=\"current-deck-area\">\n        <Form currentDeck={currentDeck} clearDeckStateOnSave={clearDeckStateOnSave}/>\n        <CurrentDeck currentlySelectedDeck={currentDeck}/>\n      </div>\n      <SavedDecksContainer changeDeck={changeDeck}/>\n    </aside>\n  )\n}\n\nexport default SideBar\n\nSideBar.propTypes = {\n  currentDeck: PropTypes.array,\n  changeDeck: PropTypes.func,\n  clearDeckStateOnSave: PropTypes.func\n}","import React from 'react';\nimport './Card.css'\nimport { NavLink } from 'react-router-dom'\nimport PropTypes from \"prop-types\";\n\nconst Card = ({id, key, name, imgGold, addCardToDeck, removeCardFromDeck, currentPage }) => {\n  let addOrRemoveButton = currentPage === 'home' ?\n    (<button id={name} data-testid={name + '-add'} onClick={e => addCardToDeck(e.target.id)} className=\"cardList-btn-add\">Add</button>) :\n    (<button id={name} data-testid={name + '-rmv'} onClick={e => removeCardFromDeck(e.target.id)} className=\"cardList-btn-remove\">Remove</button>)\n\n  return(\n    <section data-testid={id} key={key} className=\"card-container\">\n      <img onError={(e)=>{e.target.onerror = null; e.target.src=\"http://wow.zamimg.com/images/hearthstone/backs/original/Card_Back_Default.png\"}} src={imgGold} alt={name} />\n      <h2 className=\"card-name-text\">{name}</h2>\n      <div className=\"card-button-container\">\n        {addOrRemoveButton}\n        <NavLink id={id} className=\"view-card-btn\" to={`/card-details/${id}`}><button data-testid={name} className=\"cardList-btn-view\">View</button></NavLink>\n      </div>\n    </section>\n  )\n}\n\nexport default Card\n\nCard.propTypes = {\n  id: PropTypes.string,\n  key: PropTypes.string,\n  name: PropTypes.string,\n  imgGold: PropTypes.string,\n  addCardToDeck: PropTypes.func,\n  removeCardFromDeck: PropTypes.func,\n  currentPage: PropTypes.string,\n\n}","import React from 'react';\nimport Card from '../Card/Card'\nimport './CardListContainer.css'\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\n\nconst CardListContainer = props => {\n  let cardList = props.classicCards.map(card => {\n    if (card.collectible === true) {\n      return (<Card\n              id={card.cardId}\n              key={card.cardId}\n              name={card.name}\n              img={card.img}\n              imgGold={card.imgGold}\n              addCardToDeck={props.addCardToDeck}\n              removeCardFromDeck={props.removeCardFromDeck}\n              currentPage={props.currentPage}\n            />)\n      } else {\n        return null\n      }\n    })\n\n  return(\n    <section data-testid=\"card-list-container\" className=\"card-list-container\">\n      {cardList}\n    </section>\n  )\n}\n\nconst mapStateToProps = state => ({\n  classicCards: state.loadCards\n})\n\nexport default connect(mapStateToProps)(CardListContainer)\n\nCardListContainer.propTypes = {\n  cardId: PropTypes.string,\n  name: PropTypes.string,\n  img: PropTypes.string,\n  imgGold: PropTypes.string,\n  addCardToDeck: PropTypes.func,\n  removeCardFromDeck: PropTypes.func,\n  currentPage: PropTypes.string,\n}","import React from 'react';\nimport Card from '../Card/Card';\nimport './ViewDeckContainer.css';\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\n\nconst ViewDeckContainer = props => {\n  let cardList;\n  if(props.currentDeck.length > 0) {\n     cardList = props.currentDeck.map(card => {\n      let possibleCard = props.classicCards.filter(cardName => cardName.name === card)\n      let cardInfo = possibleCard.find(cardStats => cardStats.collectible === true)\n      return (<Card\n              id={cardInfo.cardId}\n              key={cardInfo.cardId}\n              name={cardInfo.name}\n              img={cardInfo.img}\n              imgGold={cardInfo.imgGold}\n              addCardToDeck={props.addCardToDeck}\n              removeCardFromDeck={props.removeCardFromDeck}\n            />)\n    })\n  } else {\n    cardList = (<h2 className=\"no-card-msg\">Your Deck Has No Cards</h2>)\n  }\n\n\n  return(\n    <section className=\"card-list-container\">\n      {cardList}\n    </section>\n  )\n\n}\n\nconst mapStateToProps = state => ({\n  classicCards: state.loadCards,\n})\n\nexport default connect(mapStateToProps)(ViewDeckContainer)\n\nViewDeckContainer.propTypes = {\n  cardId: PropTypes.string,\n  name: PropTypes.string,\n  img: PropTypes.string,\n  imgGold: PropTypes.string,\n  addCardToDeck: PropTypes.func,\n  removeCardFromDeck: PropTypes.func,\n  currentDeck: PropTypes.array\n}\n\n","import React from 'react';\nimport './CardDetails.css'\nimport { NavLink } from 'react-router-dom'\nimport PropTypes from \"prop-types\";\n\nconst CardDetails = props =>  {\n  let cardToRender = props.type === 'spell' ?\n    (<ul className=\"card-detail-list\">\n    <li>Mana Cost: {props.cost}</li>\n    <li>Player Class: {props.playerClass}</li>\n    <li>Text: {props.text}</li>\n    <li>Card Type: {props.type}</li>\n    <li>Card Set: {props.cardSet}</li>\n    <li>Rarity: {props.rarity}</li>\n    <li>Flavor Text: {props.flavor}</li>\n    <li>Artist: {props.artist}</li>\n  </ul>) :\n    (<ul className=\"card-detail-list\">\n      <li>Mana Cost: {props.cost}</li>\n      <li>Player Class: {props.playerClass}</li>\n      <li>Text: {props.text}</li>\n      <li>Attack: {props.attack}</li>\n      <li>Health: {props.health}</li>\n      <li>Card Type: {props.type}</li>\n      <li>Card Set: {props.cardSet}</li>\n      <li>Rarity: {props.rarity}</li>\n      <li>Flavor Text: {props.flavor}</li>\n      <li>Artist: {props.artist}</li>\n    </ul>)\n\n  return(\n    <section className=\"card-details\">\n      <h2>Card Name: {props.name}</h2>\n      <div className=\"details-container\">\n        <img className=\"details-img\" onError={(e)=>{e.target.onerror = null; e.target.src=\"http://wow.zamimg.com/images/hearthstone/backs/original/Card_Back_Default.png\"}} src={props.imgGold} alt={props.name}/>\n        {cardToRender}\n      </div>\n      <div className=\"details-button-container\">\n        <button id={props.name} onClick={e => props.addCardToDeck(e.target.id)} className=\"details-add-btn\">Add To Deck</button>\n        <NavLink className=\"details-nav-link\" to=\"/\"><button className=\"details-back-btn\">Back To Browse</button></NavLink>\n      </div>\n    </section>\n  )\n}\n\nexport default CardDetails\n\nCardDetails.propTypes = {\n  cost: PropTypes.string,\n  playerClass: PropTypes.string,\n  text: PropTypes.string,\n  type: PropTypes.string,\n  cardSet: PropTypes.string,\n  rarity: PropTypes.string,\n  flavor: PropTypes.string,\n  artist: PropTypes.string,\n  attack: PropTypes.string,\n  health: PropTypes.string,\n  addCardToDeck: PropTypes.func\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Nav from '../Nav/Nav';\nimport SideBar from '../SideBar/SideBar';\nimport CardListContainer from '../CardListContainer/CardListContainer';\nimport ViewDeckContainer from '../ViewDeckContainer/ViewDeckContainer';\nimport CardDetails from '../CardDetails/CardDetails'\nimport { Route, Switch } from 'react-router-dom';\nimport { getClassicCards } from '../../apicalls';\nimport { connect } from 'react-redux';\nimport { loadClassicCards } from '../../actions'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentDeck: [],\n      currentPage: 'home'\n    }\n  }\n\n  componentDidMount = () => {\n    getClassicCards()\n      .then(classicCards => {\n        this.props.loadClassicCards(classicCards)\n      })\n      .catch(err => console.error(err.message))\n  }\n\n  addCardToDeck = cardName => {\n    let updatedDeck = this.state.currentDeck.concat([cardName])\n    this.setState({currentDeck: updatedDeck})\n  }\n\n  removeCardFromDeck = cardName => {\n    if(this.state.currentDeck.includes(cardName)) {\n      let updatedDeck = this.state.currentDeck\n      this.state.currentDeck.splice(this.state.currentDeck.indexOf(cardName), 1)\n      this.setState({currentDeck: updatedDeck})\n    }\n  }\n\n  changeDeck = deckName => {\n    let savedDeckNames = this.props.savedDecks.map(deck => Object.keys(deck))\n    let updatedCurrentDeckName = savedDeckNames.find(savedDeck => savedDeck[0] === deckName)\n    let newCurrentDeck = this.props.savedDecks.find(savedDeck => savedDeck[updatedCurrentDeckName[0]])\n    this.setState({currentDeck: newCurrentDeck[updatedCurrentDeckName]})\n  }\n\n  changePage = page => {\n    this.setState({currentPage: page})\n  }\n\n  resetCurrentDeck = () => {\n    this.setState({currentDeck: []})\n  }\n\n  render() {\n    return(\n      <main>\n        <Nav changePage={this.changePage} currentPage={this.state.currentPage}/>\n        <Switch>\n        <Route\n            path=\"/\" exact\n            component={() =>\n              <section className=\"content-area\">\n                <SideBar\n                  currentDeck={this.state.currentDeck}\n                  changeDeck={this.changeDeck}\n                  clearDeckStateOnSave={this.resetCurrentDeck}\n                  />\n                <CardListContainer\n                  addCardToDeck={this.addCardToDeck}\n                  removeCardFromDeck={this.removeCardFromDeck}\n                  currentPage={this.state.currentPage}\n                  changePage={this.changePage}\n                  />\n              </section>\n            }\n        />\n        <Route\n            path=\"/current-deck\" exact\n            component={() => (\n              <section className=\"content-area\">\n                <SideBar\n                  currentDeck={this.state.currentDeck}\n                  changeDeck={this.changeDeck}\n                  clearDeckStateOnSave={this.resetCurrentDeck}\n                  />\n                <ViewDeckContainer\n                  addCardToDeck={this.addCardToDeck}\n                  currentDeck={this.state.currentDeck}\n                  currentPage={this.state.currentPage}\n                  changePage={this.changePage}\n                  removeCardFromDeck={this.removeCardFromDeck}\n                  />\n              </section>\n            )}\n        />\n        <Route\n          path=\"/card-details/:id\" exact\n          render={({ match }) => {\n            const card = this.props.classicCards.find(classicCard => {\n              return match.params.id === classicCard.cardId\n            })\n            return (<section className=\"content-area\">\n                <SideBar\n                  currentDeck={this.state.currentDeck}\n                  changeDeck={this.changeDeck}\n                  clearDeckStateOnSave={this.resetCurrentDeck}\n                  />\n                <CardDetails addCardToDeck={this.addCardToDeck} {...card}/>\n              </section>)\n          }}\n        />\n        </Switch>\n      </main>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  loadClassicCards: classicCards => dispatch(loadClassicCards(classicCards)),\n})\n\nconst mapStateToProps = state => ({\n  classicCards: state.loadCards,\n  savedDecks: state.savedDecks\n})\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const getClassicCards = () => {\n  return fetch(\"https://omgvamp-hearthstone-v1.p.rapidapi.com/cards/sets/Classic\" , {\n  method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      \"x-rapidapi-host\": \"omgvamp-hearthstone-v1.p.rapidapi.com\",\n\t    \"x-rapidapi-key\": \"161a19f05cmsh9ec31d6ba6eb755p1181c7jsn462a3d87026c\"\n    }\n})\n  .then(response => response.json())\n}\n\n","import { combineReducers } from 'redux';\nimport { loadCards } from './loadCards'\nimport { savedDecks } from './savedDecks'\n\nconst rootReducer = combineReducers({\n  loadCards,\n  savedDecks\n})\n\nexport default rootReducer;","export const loadCards = (state = [], action) => {\n  switch (action.type) {\n    case 'LOAD_CLASSIC':\n      return [...state, ...action.cards];\n    default:\n      return state;\n  }\n}","export const savedDecks = (state = [], action) => {\n  switch (action.type) {\n    case 'SAVE_DECK':\n      let incomingDeckName = Object.keys(action.deck)\n      let currentDeckNames = state.map(deck => {\n        let name = Object.keys(deck)\n        return name[0]\n      })\n      if (currentDeckNames.includes(incomingDeckName[0])) {\n        let deckToRemove = state.find(deck => {\n          let deckName = Object.keys(deck)\n          return deckName[0] === incomingDeckName[0]\n        })\n        state.splice(state.indexOf(deckToRemove), 1)\n        return [...state, action.deck]\n      } else {\n        return [...state, action.deck];\n      }\n    default:\n      return state;\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './reducers';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nconst router = <BrowserRouter><App></App></BrowserRouter>\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      {router}\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}